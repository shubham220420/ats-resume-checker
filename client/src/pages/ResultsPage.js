import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  BarChart3, 
  CheckCircle, 
  AlertCircle, 
  Lightbulb, 
  Download,
  ArrowLeft,
  TrendingUp,
  Target,
  FileText,
  Star
} from 'lucide-react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

const ResultsPage = () => {
  const navigate = useNavigate();
  const [results, setResults] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    const storedResults = localStorage.getItem('analysisResults');
    if (storedResults) {
      setResults(JSON.parse(storedResults));
    } else {
      navigate('/analyze');
    }
  }, [navigate]);

  if (!results) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading results...</p>
        </div>
      </div>
    );
  }

  const getScoreClass = (score) => {
    if (score >= 80) return 'score-excellent';
    if (score >= 60) return 'score-good';
    return 'score-poor';
  };

  const getScoreLabel = (score) => {
    if (score >= 80) return 'Excellent';
    if (score >= 60) return 'Good';
    return 'Needs Improvement';
  };

  const tabs = [
    { id: 'overview', label: 'Overview', icon: BarChart3 },
    { id: 'keywords', label: 'Keywords', icon: Target },
    { id: 'structure', label: 'Structure', icon: FileText },
    { id: 'suggestions', label: 'Suggestions', icon: Lightbulb }
  ];

  // PDF Export Handler
  const handleExportPDF = async () => {
    const reportElement = document.getElementById('results-report');
    if (!reportElement) return;
    const canvas = await html2canvas(reportElement, { scale: 2 });
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({ orientation: 'portrait', unit: 'pt', format: 'a4' });
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const imgProps = pdf.getImageProperties(imgData);
    const pdfWidth = pageWidth - 40;
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
    pdf.addImage(imgData, 'PNG', 20, 20, pdfWidth, pdfHeight);
    // Add badge and logo at the bottom
    pdf.setFontSize(12);
    pdf.setTextColor('#888');
    pdf.text('Generated by ATS Resume Analyzer', pageWidth / 2, pageHeight - 40, { align: 'center' });
    // Optionally add a simple icon (drawn)
    pdf.setDrawColor('#6366f1');
    pdf.setFillColor('#6366f1');
    pdf.circle(pageWidth / 2, pageHeight - 20, 8, 'F');
    pdf.save('ATS-Resume-Analysis-Report.pdf');
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <button
              onClick={() => navigate('/analyze')}
              className="flex items-center space-x-2 text-gray-600 hover:text-primary-600 transition-colors"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Analysis</span>
            </button>
            <button className="btn-secondary flex items-center space-x-2" onClick={handleExportPDF}>
              <Download className="w-4 h-4" />
              <span>Export Report (PDF)</span>
            </button>
          </div>

          {/* Main Results Content to Export */}
          <div id="results-report">
            {/* Overall Score */}
            <div className="card mb-8">
              <div className="text-center">
                <h1 className="text-3xl font-bold text-gray-900 mb-4">Analysis Results</h1>
                <div className="flex items-center justify-center space-x-8">
                  <div className={`score-circle ${getScoreClass(results.overallScore)}`}>
                    {results.overallScore}
                  </div>
                  <div className="text-left">
                    <h2 className="text-2xl font-bold text-gray-900">
                      {getScoreLabel(results.overallScore)}
                    </h2>
                    <p className="text-gray-600">
                      Overall ATS Compatibility Score
                    </p>
                    <p className="text-sm text-gray-500 mt-1">
                      Analyzed on {new Date(results.metadata.analysisDate).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Tabs */}
            <div className="card mb-8">
              <div className="border-b border-gray-200">
                <nav className="flex space-x-8">
                  {tabs.map((tab) => {
                    const Icon = tab.icon;
                    return (
                      <button
                        key={tab.id}
                        onClick={() => setActiveTab(tab.id)}
                        className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                          activeTab === tab.id
                            ? 'border-primary-500 text-primary-600'
                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        <Icon className="w-4 h-4" />
                        <span>{tab.label}</span>
                      </button>
                    );
                  })}
                </nav>
              </div>

              {/* Tab Content */}
              <div className="py-6">
                {activeTab === 'overview' && (
                  <OverviewTab results={results} getScoreClass={getScoreClass} />
                )}
                {activeTab === 'keywords' && (
                  <KeywordsTab results={results} />
                )}
                {activeTab === 'structure' && (
                  <StructureTab results={results} />
                )}
                {activeTab === 'suggestions' && (
                  <SuggestionsTab results={results} />
                )}
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

// Overview Tab Component
const OverviewTab = ({ results, getScoreClass }) => {
  const breakdown = results.breakdown;
  const feedback = results.feedback;

  return (
    <div className="space-y-6">
      {/* Score Breakdown */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Score Breakdown</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
          {Object.entries(breakdown).map(([key, score]) => (
            <div key={key} className="text-center p-4 bg-gray-50 rounded-lg">
              <div className={`score-circle ${getScoreClass(score)} mx-auto mb-2`}>
                {score}
              </div>
              <h4 className="font-medium text-gray-900 capitalize">
                {key.replace(/([A-Z])/g, ' $1').trim()}
              </h4>
            </div>
          ))}
        </div>
      </div>

      {/* Feedback Summary */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Summary</h3>
        <div className="bg-blue-50 rounded-lg p-4">
          <p className="text-blue-900">{feedback.summary}</p>
        </div>
      </div>

      {/* Strengths and Weaknesses */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <CheckCircle className="w-5 h-5 text-success-600 mr-2" />
            Strengths
          </h3>
          <ul className="space-y-2">
            {feedback.strengths.map((strength, index) => (
              <li key={index} className="flex items-start">
                <CheckCircle className="w-4 h-4 text-success-600 mr-2 mt-0.5 flex-shrink-0" />
                <span className="text-gray-700">{strength}</span>
              </li>
            ))}
          </ul>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <AlertCircle className="w-5 h-5 text-warning-600 mr-2" />
            Areas for Improvement
          </h3>
          <ul className="space-y-2">
            {feedback.weaknesses.map((weakness, index) => (
              <li key={index} className="flex items-start">
                <AlertCircle className="w-4 h-4 text-warning-600 mr-2 mt-0.5 flex-shrink-0" />
                <span className="text-gray-700">{weakness}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

// Keywords Tab Component
const KeywordsTab = ({ results }) => {
  const { matched, missing, resumeKeywords, jobKeywords } = results.keywordAnalysis;

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Matched Keywords */}
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <CheckCircle className="w-5 h-5 text-success-600 mr-2" />
            Matched Keywords ({matched.length})
          </h3>
          <div className="flex flex-wrap gap-2">
            {matched.map((keyword, index) => (
              <span
                key={index}
                className="px-3 py-1 bg-success-100 text-success-800 rounded-full text-sm font-medium"
              >
                {keyword}
              </span>
            ))}
          </div>
        </div>

        {/* Missing Keywords */}
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <AlertCircle className="w-5 h-5 text-warning-600 mr-2" />
            Missing Keywords ({missing.length})
          </h3>
          <div className="flex flex-wrap gap-2">
            {missing.map((keyword, index) => (
              <span
                key={index}
                className="px-3 py-1 bg-warning-100 text-warning-800 rounded-full text-sm font-medium"
              >
                {keyword}
              </span>
            ))}
          </div>
        </div>
      </div>

      {/* Top Keywords Comparison */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Resume Keywords</h3>
          <div className="space-y-2">
            {resumeKeywords.map((keyword, index) => (
              <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                <span className="text-gray-700">{keyword}</span>
                <span className="text-sm text-gray-500">#{index + 1}</span>
              </div>
            ))}
          </div>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Job Keywords</h3>
          <div className="space-y-2">
            {jobKeywords.map((keyword, index) => (
              <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                <span className="text-gray-700">{keyword}</span>
                <span className="text-sm text-gray-500">#{index + 1}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Structure Tab Component
const StructureTab = ({ results }) => {
  const { sections, issues, recommendations } = results.structureAnalysis;

  return (
    <div className="space-y-6">
      {/* Section Analysis */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Resume Sections</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Object.entries(sections).map(([section, found]) => (
            <div key={section} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <span className="font-medium text-gray-700 capitalize">
                {section.replace(/([A-Z])/g, ' $1').trim()}
              </span>
              {found ? (
                <CheckCircle className="w-5 h-5 text-success-600" />
              ) : (
                <AlertCircle className="w-5 h-5 text-warning-600" />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Issues */}
      {issues.length > 0 && (
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <AlertCircle className="w-5 h-5 text-warning-600 mr-2" />
            ATS Compatibility Issues
          </h3>
          <ul className="space-y-2">
            {issues.map((issue, index) => (
              <li key={index} className="flex items-start p-3 bg-warning-50 rounded-lg">
                <AlertCircle className="w-4 h-4 text-warning-600 mr-2 mt-0.5 flex-shrink-0" />
                <span className="text-warning-800">{issue}</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* Recommendations */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Structure Recommendations</h3>
        <ul className="space-y-2">
          {recommendations.map((rec, index) => (
            <li key={index} className="flex items-start p-3 bg-blue-50 rounded-lg">
              <Lightbulb className="w-4 h-4 text-blue-600 mr-2 mt-0.5 flex-shrink-0" />
              <span className="text-blue-800">{rec}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

// Suggestions Tab Component
const SuggestionsTab = ({ results }) => {
  const { general, specific, actionVerbs, powerPhrases } = results.aiSuggestions;

  return (
    <div className="space-y-6">
      {/* General Suggestions */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">General Improvement Suggestions</h3>
        <ul className="space-y-2">
          {general.map((suggestion, index) => (
            <li key={index} className="flex items-start p-3 bg-gray-50 rounded-lg">
              <Lightbulb className="w-4 h-4 text-primary-600 mr-2 mt-0.5 flex-shrink-0" />
              <span className="text-gray-700">{suggestion}</span>
            </li>
          ))}
        </ul>
      </div>

      {/* Specific Suggestions */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Job-Specific Suggestions</h3>
        <ul className="space-y-2">
          {specific.map((suggestion, index) => (
            <li key={index} className="flex items-start p-3 bg-blue-50 rounded-lg">
              <Target className="w-4 h-4 text-blue-600 mr-2 mt-0.5 flex-shrink-0" />
              <span className="text-blue-800">{suggestion}</span>
            </li>
          ))}
        </ul>
      </div>

      {/* Action Verbs */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Powerful Action Verbs</h3>
        <div className="flex flex-wrap gap-2">
          {actionVerbs.map((verb, index) => (
            <span
              key={index}
              className="px-3 py-1 bg-primary-100 text-primary-800 rounded-full text-sm font-medium"
            >
              {verb}
            </span>
          ))}
        </div>
      </div>

      {/* Power Phrases */}
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Impact Phrases</h3>
        <ul className="space-y-2">
          {powerPhrases.map((phrase, index) => (
            <li key={index} className="flex items-start p-3 bg-success-50 rounded-lg">
              <TrendingUp className="w-4 h-4 text-success-600 mr-2 mt-0.5 flex-shrink-0" />
              <span className="text-success-800">{phrase}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default ResultsPage;